var counter = 0;
var RedIcon = L.Icon.Default.extend({
    options: {
        //iconUrl: 'marker-icon-red.png'               
        //iconUrl: './libs/images/arrow.png',
        iconSize: [17, 23],
        iconAnchor: [0,0]
    }
});

//L.Draw.Marker = L.Draw.Feature.extend({

L.Draw.Marker = L.Draw.Polyline.extend({

	statics: {
		TYPE: 'marker'
	},

	options: {
		shapeOptions: {
			stroke: true,
			color: '#f06eaa',
			weight: 4,
			opacity: 0.5,
			fill: true,
			fillColor: null, //same as color by default
			fillOpacity: 0.2,
			clickable: true
		},
		icon: new L.Icon.Default(),
		//icon: new RedIcon(),
		repeatMode: false,
		//repeatMode: true,
		zIndexOffset: 2000 // This should be > than the highest z-index any markers
	},

	initialize: function (map, options) {
		this.type = L.Draw.Marker.TYPE;
		L.Draw.Feature.prototype.initialize.call(this, map, options);
	},

	addHooks: function () {
		L.Draw.Feature.prototype.addHooks.call(this);

		if (this._map) {
			this._tooltip.updateContent({ text: L.drawLocal.draw.handlers.marker.tooltip.start });

			// Same mouseMarker as in Draw.Polyline
			if (!this._mouseMarker) {
				this._mouseMarker = L.marker(this._map.getCenter(), {
					icon: L.divIcon({
						className: 'leaflet-mouse-marker',
						iconAnchor: [20, 20],
						iconSize: [40, 40]
					}),
					opacity: 0,
					zIndexOffset: this.options.zIndexOffset
				});
			}

			this._mouseMarker
				.on('click', this._onClick, this)
				.addTo(this._map);

			this._map.on('mousemove', this._onMouseMove, this);
		}
	},

	removeHooks: function () {
		L.Draw.Feature.prototype.removeHooks.call(this);
		if (this._map) {
			if (this._marker) {
				this._marker.off('click', this._onClick, this);
				this._map
					.off('click', this._onClick, this)
					.removeLayer(this._marker);
				delete this._marker;
			}
			this._mouseMarker.off('click', this._onClick, this);
			this._map.removeLayer(this._mouseMarker);
			delete this._mouseMarker;
			this._map.off('mousemove', this._onMouseMove, this);
		}
	},

	_onMouseMove: function (e) {
		var latlng = e.latlng;
		this._tooltip.updatePosition(latlng);
		this._mouseMarker.setLatLng(latlng);
		if (!this._marker) {
			this._marker = new L.Marker(latlng, {
				icon: this.options.icon,
				zIndexOffset: this.options.zIndexOffset
			});
			// Bind to both marker and map to make sure we get the click event.
			this._marker.on('click', this._onClick, this);
			this._map.on('click', this._onClick, this).addLayer(this._marker);
		} else {
			latlng = this._mouseMarker.getLatLng();
			this._marker.setLatLng(latlng);
		}
        counter = 0;
	},

	_onClick: function () {
		this._fireCreatedEvent();
		//this.disable();
		//if (this.options.repeatMode) {
		//	this.enable();
		//}
	},

	_fireCreatedEvent: function () {
        var center = this._marker.getLatLng(); 
        var radius = 0.0005*++counter; // radius = 50 meters
        var hexagonPoints = []; 
        //hexagonPoints.push(new L.LatLng(center.lat+radius, center.lng));
        //hexagonPoints.push(new L.LatLng(center.lat+radius*0.5, center.lng+radius*Math.sqrt(3)*0.5));
        //hexagonPoints.push(new L.LatLng(center.lat-radius*0.5, center.lng+radius*Math.sqrt(3)*0.5));
        //hexagonPoints.push(new L.LatLng(center.lat-radius, center.lng));
        //hexagonPoints.push(new L.LatLng(center.lat-radius*0.5, center.lng-radius*Math.sqrt(3)*0.5));
        //hexagonPoints.push(new L.LatLng(center.lat+radius*0.5, center.lng-radius*Math.sqrt(3)*0.5));
        //hexagonPoints.push(new L.LatLng(center.lat+radius, center.lng));
        hexagonPoints.push(new L.LatLng(center.lat, center.lng+radius));
        hexagonPoints.push(new L.LatLng(center.lat+radius*0.70, center.lng+radius*0.5));
        hexagonPoints.push(new L.LatLng(center.lat+radius*0.70, center.lng-radius*0.5));
        hexagonPoints.push(new L.LatLng(center.lat, center.lng-radius));
        hexagonPoints.push(new L.LatLng(center.lat-radius*0.70, center.lng-radius*0.5));
        hexagonPoints.push(new L.LatLng(center.lat-radius*0.70, center.lng+radius*0.5));
        hexagonPoints.push(new L.LatLng(center.lat, center.lng+radius));
        //var poly = new L.Polyline(hexagonPoints, this.options.shapeOptions);
        var poly = new L.Polygon(hexagonPoints, this.options.shapeOptions);

        if (counter > 2) {
            this.disable();
            //if (this.options.repeatMode) {
            //    this.enable();
            //}
            counter = 0;
        } 
        //var circle = new L.Circle(this._marker.getLatLng(), 50*++counter, this.options.shapeOptions);
        //if (counter > 2) {
        //    this.disable();
        //    counter = 0;
        //}
		//L.Draw.SimpleShape.prototype._fireCreatedEvent.call(this, circle);

		L.Draw.Feature.prototype._fireCreatedEvent.call(this, poly);
		//var marker = new L.Marker(this._marker.getLatLng(), { icon: this.options.icon });
		//L.Draw.Feature.prototype._fireCreatedEvent.call(this, marker);
	}
});
